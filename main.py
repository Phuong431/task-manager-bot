from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
import sqlite3
from datetime import datetime
import os
import threading

# Token c·ªßa bot Telegram
TOKEN = os.getenv("TOKEN")  # L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng  # L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng tr√™n Render
# K·∫øt n·ªëi database
conn = sqlite3.connect("tasks.db", check_same_thread=False)
cursor = conn.cursor()

# Kh√≥a ƒë·ªÉ b·∫£o v·ªá truy c·∫≠p SQLite
db_lock = threading.Lock()

# T·∫°o b·∫£ng l∆∞u c√¥ng vi·ªác
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    description TEXT,
    created_at TEXT,
    completed_at TEXT,
    status TEXT
)
''')
conn.commit()

# X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng g·ª≠i
def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    text = update.message.text.strip()
    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with db_lock:
        cursor.execute('''
        INSERT INTO tasks (user_id, description, created_at, status)
        VALUES (?, ?, ?, ?)
        ''', (user_id, text, created_at, "Pending"))
        conn.commit()

    update.message.reply_text(
        f"‚úÖ ƒê√£ ghi nh·∫≠n c√¥ng vi·ªác: {text}\n"
        f"üìÖ T·∫°o l√∫c: {created_at}"
    )

# Xem danh s√°ch c√¥ng vi·ªác ch∆∞a ho√†n th√†nh
def view_tasks(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    with db_lock:
        cursor.execute('''
        SELECT id, description, created_at FROM tasks
        WHERE user_id = ? AND status = "Pending"
        ''', (user_id,))
        tasks = cursor.fetchall()

    if not tasks:
        update.message.reply_text("üéâ B·∫°n kh√¥ng c√≥ c√¥ng vi·ªác n√†o ƒëang ch·ªù x·ª≠ l√Ω.")
        return

    keyboard = [
        [InlineKeyboardButton(f"‚úÖ {task[1]} (T·∫°o l√∫c: {task[2]})", callback_data=f"complete:{task[0]}")]
        for task in tasks
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "üìã Danh s√°ch c√¥ng vi·ªác ch·ªù ho√†n th√†nh:",
        reply_markup=reply_markup
    )

# ƒê√°nh d·∫•u ho√†n th√†nh c√¥ng vi·ªác
def complete_task(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    task_id = query.data.split(":")[1]

    completed_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with db_lock:
        cursor.execute('''
        UPDATE tasks
        SET status = "Completed", completed_at = ?
        WHERE id = ?
        ''', (completed_at, task_id))
        conn.commit()

    query.edit_message_text(
        text=f"üéâ C√¥ng vi·ªác ƒë√£ ho√†n th√†nh! (ID: {task_id})\n"
        f"‚è∞ Ho√†n th√†nh l√∫c: {completed_at}"
    )

# B√°o c√°o t·ªïng c√¥ng vi·ªác theo tr·∫°ng th√°i
def report(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    with db_lock:
        cursor.execute('''
        SELECT status, COUNT(*) FROM tasks
        WHERE user_id = ?
        GROUP BY status
        ''', (user_id,))
        data = cursor.fetchall()

    report_text = "**üìä B√°o c√°o c√¥ng vi·ªác:**\n"
    total_tasks = 0
    for status, count in data:
        report_text += f"‚Ä¢ {status}: {count} c√¥ng vi·ªác\n"
        total_tasks += count

    report_text += f"\n**T·ªïng c·ªông:** {total_tasks} c√¥ng vi·ªác"
    update.message.reply_text(report_text, parse_mode="Markdown")

# C·∫•u h√¨nh bot
def main():
    PORT = int(os.environ.get("PORT", "8443"))
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(CommandHandler("view", view_tasks))
    dispatcher.add_handler(CallbackQueryHandler(complete_task, pattern=r"^complete:\d+$"))
    dispatcher.add_handler(CommandHandler("report", report))

    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN
    )
    updater.bot.set_webhook(f"https://task-manager-bot-1.onrender.com/{TOKEN}")  # Thay <RENDER_URL> b·∫±ng URL c·ªßa b·∫°n
    updater.idle()

if __name__ == "__main__":
    main()
