from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import sqlite3
from datetime import datetime
import time

# Thay YOUR_BOT_TOKEN b·∫±ng token API c·ªßa b·∫°n
TOKEN = "7849256875:AAEdZz3oRQ-YHOKqjOnY12f_L0PgMyLV57M"

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu SQLite
conn = sqlite3.connect("tasks.db", check_same_thread=False)
cursor = conn.cursor()

# T·∫°o b·∫£ng c√¥ng vi·ªác
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    description TEXT,
    created_at TEXT,
    completed_at TEXT,
    status TEXT
)
''')
conn.commit()

# L·ªánh /start: Ch√†o m·ª´ng ng∆∞·ªùi d√πng
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "Xin ch√†o! T√¥i l√† bot qu·∫£n l√Ω c√¥ng vi·ªác.\n"
        "C√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:\n"
        "‚Ä¢ /add [M√¥ t·∫£ c√¥ng vi·ªác] - Th√™m c√¥ng vi·ªác m·ªõi\n"
        "‚Ä¢ /done [ID c√¥ng vi·ªác] - ƒê√°nh d·∫•u c√¥ng vi·ªác ho√†n th√†nh\n"
        "‚Ä¢ /view - Xem c√¥ng vi·ªác h√¥m nay\n"
        "‚Ä¢ /report - B√°o c√°o c√¥ng vi·ªác th√°ng n√†y\n"
    )

# L·ªánh /add: Th√™m c√¥ng vi·ªác m·ªõi
def add_task(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    text = " ".join(context.args)

    if not text:
        update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác. V√≠ d·ª•: `/add L√†m b√°o c√°o`")
        return

    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Th·ªùi gian hi·ªán t·∫°i
    cursor.execute('''
    INSERT INTO tasks (user_id, description, created_at, status) VALUES (?, ?, ?, ?)
    ''', (user_id, text, created_at, "Pending"))
    conn.commit()

    update.message.reply_text(f"‚úÖ Ghi nh·∫≠n c√¥ng vi·ªác: {text} (T·∫°o l√∫c: {created_at})")

# L·ªánh /done: ƒê√°nh d·∫•u c√¥ng vi·ªác ho√†n th√†nh
def mark_done(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    task_id = " ".join(context.args)

    if not task_id.isdigit():
        update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID c√¥ng vi·ªác b·∫°n mu·ªën ƒë√°nh d·∫•u ho√†n th√†nh.")
        return

    completed_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Th·ªùi gian ho√†n th√†nh
    cursor.execute('''
    SELECT created_at FROM tasks WHERE id = ? AND user_id = ? AND status = "Pending"
    ''', (task_id, user_id))
    task = cursor.fetchone()

    if not task:
        update.message.reply_text(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác v·ªõi ID {task_id}.")
        return

    created_at = datetime.strptime(task[0], "%Y-%m-%d %H:%M:%S")
    completed_at_dt = datetime.strptime(completed_at, "%Y-%m-%d %H:%M:%S")
    time_taken = completed_at_dt - created_at  # T√≠nh t·ªïng th·ªùi gian ho√†n th√†nh

    cursor.execute('''
    UPDATE tasks SET status = "Done", completed_at = ? WHERE id = ? AND user_id = ?
    ''', (completed_at, task_id, user_id))
    conn.commit()

    update.message.reply_text(
        f"‚úÖ C√¥ng vi·ªác ID {task_id} ƒë√£ ho√†n th√†nh.\n"
        f"‚è∞ T·ªïng th·ªùi gian ho√†n th√†nh: {time_taken}."
    )

# L·ªánh /view: Xem c√¥ng vi·ªác h√¥m nay
def view_tasks(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    today = datetime.now().strftime("%Y-%m-%d")

    cursor.execute('''
    SELECT id, description, created_at FROM tasks
    WHERE user_id = ? AND status = "Pending"
    ''', (user_id,))
    tasks = cursor.fetchall()

    if not tasks:
        update.message.reply_text("üìã B·∫°n kh√¥ng c√≥ c√¥ng vi·ªác n√†o c·∫ßn l√†m h√¥m nay.")
    else:
        message = "**üìã C√¥ng vi·ªác c·∫ßn l√†m h√¥m nay:**\n"
        for task in tasks:
            message += f"‚Ä¢ ID {task[0]}: {task[1]} (T·∫°o l√∫c: {task[2]})\n"
        update.message.reply_text(message, parse_mode="Markdown")

# L·ªánh /report: B√°o c√°o c√¥ng vi·ªác h√†ng th√°ng
def report(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    current_month = datetime.now().strftime("%Y-%m")

    cursor.execute('''
    SELECT description, created_at, completed_at, status FROM tasks
    WHERE user_id = ? AND strftime('%Y-%m', created_at) = ?
    ''', (user_id, current_month))
    tasks = cursor.fetchall()

    if not tasks:
        update.message.reply_text("üìä Kh√¥ng c√≥ c√¥ng vi·ªác n√†o trong th√°ng n√†y.")
    else:
        message = "**üìä B√°o c√°o c√¥ng vi·ªác th√°ng n√†y:**\n"
        for task in tasks:
            message += f"‚Ä¢ {task[0]} (T·∫°o: {task[1]}, Ho√†n th√†nh: {task[2]}, Tr·∫°ng th√°i: {task[3]})\n"
        update.message.reply_text(message, parse_mode="Markdown")

# Kh·ªüi ch·∫°y bot
def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("add", add_task))
    dispatcher.add_handler(CommandHandler("done", mark_done))
    dispatcher.add_handler(CommandHandler("view", view_tasks))
    dispatcher.add_handler(CommandHandler("report", report))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()

